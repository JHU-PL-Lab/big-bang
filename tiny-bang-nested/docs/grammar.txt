Expr ::= LetExpr
LetExpr ::= let Var = LetExpr in LetExpr
LetExpr ::= FuncExpr
FuncExpr ::= Pattern -> LetExpr
FuncExpr ::= BinaryArithExpr
BinaryArithExpr ::= OnionExpr ArithOp BinaryArithExpr
BinaryArithExpr ::= OnionExpr
OnionExpr ::= ApplExpr & OnionExpr
OnionExpr ::= ApplExpr
ApplExpr ::= PrefixExpr ApplExpr
ApplExpr ::= PrefixExpr
PrefixExpr ::= Label PrefixExpr
PrefixExpr ::= ref PrefixExpr
PrefixExpr ::= PrimaryExpr
PrimaryExpr ::= Var
PrimaryExpr ::= PrimitiveLiteral
PrimaryExpr ::= ( Expr )
PrimitiveLiteral ::= EmptyOnion
PrimitiveLiteral ::= Integer

Pattern ::= ConjPattern
ConjPattern ::= PrefixPattern & ConjPattern
ConjPattern ::= PrefixPattern
PrefixPattern ::= Label PrefixPattern
PrefixPattern ::= ref EmptyOnion
PrefixPattern ::= ref Var
PrefixPattern ::= PrimaryPattern
PrimaryPattern ::= PrimitiveType
PrimaryPattern ::= EmptyOnion
PrimaryPattern ::= Var
PrimaryPattern ::= ( Pattern )

