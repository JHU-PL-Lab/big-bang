{-# LANGUAGE TemplateHaskell #-}

module Language.TinyBangNested.Ast.Data
( Expr(..)
, Ident(..)
, LabelName(..)
, BinaryOperator(..)
, Pattern(..)
, PrimitiveType(..)

, unLabelName
) where

-- Haskell module generated by the BNF converter

import Control.Applicative ((<$>))
import Language.TinyBang.Ast.Origin
import Language.TinyBang.Utils.Display
import Language.TinyBang.Utils.TemplateHaskell.Deriving

-- | AST structure for TinyBangNested

data Expr
  = ExprLet Origin Ident Expr Expr
  | ExprScape Origin Pattern Expr
  | ExprBinaryOp Origin Expr BinaryOperator Expr
  | ExprOnion Origin Expr Expr
  | ExprAppl Origin Expr Expr
  | ExprLabelExp Origin LabelName Expr
  | ExprRef Origin Expr
  | ExprVar Origin Ident
  | ExprValInt Origin Integer
  | ExprValChar Origin Char
  | ExprValEmptyOnion Origin 
  deriving (Show)

data BinaryOperator
  = OpIntPlus Origin
  | OpIntMinus Origin
  | OpIntEq Origin 
  | OpIntGreaterEq Origin
  | OpIntLessEq Origin
  | OpSet Origin
  deriving (Show)

data Pattern
  = PrimitivePattern Origin PrimitiveType
  | LabelPattern Origin LabelName Pattern
  | RefPattern Origin Pattern
  | ConjunctionPattern Origin Pattern Pattern
  | EmptyPattern Origin
  | VariablePattern Origin Ident
  deriving (Show)

data Ident
  = Ident Origin String
  deriving (Show)

data LabelName
  = LabelName Origin String
  deriving (Show)
  
unLabelName :: LabelName -> String
unLabelName (LabelName _ s) = s

data PrimitiveType
  = PrimInt
  | PrimChar
  deriving (Eq,Ord,Show)

-- |Generate Eq and Ord instances
  
$(concat <$> sequence
  [ f name
  | f <- [deriveEqSkipFirst, deriveOrdSkipFirst]
  , name <-
      [ ''Expr
      , ''BinaryOperator
      , ''Pattern
      , ''Ident
      , ''LabelName
      ]
  ])

-- | HasOrigin instances for Expr 

instance HasOrigin Expr where
  originOf x = case x of
    ExprLet orig _ _ _ -> orig
    ExprScape orig _ _ -> orig
    ExprBinaryOp orig _ _ _ -> orig
    ExprOnion orig _ _ -> orig
    ExprAppl orig _ _ -> orig
    ExprLabelExp orig _ _-> orig
    ExprRef orig _ -> orig
    ExprVar orig _ -> orig
    ExprValInt orig _ -> orig
    ExprValChar orig _ -> orig
    ExprValEmptyOnion orig -> orig

instance HasOrigin Ident where
  originOf x = case x of
    Ident orig _ -> orig

instance HasOrigin Pattern where
  originOf x = case x of
   ConjunctionPattern orig _ _ -> orig
   LabelPattern orig _ _ -> orig
   RefPattern orig _ -> orig
   PrimitivePattern orig _ -> orig
   EmptyPattern orig -> orig
   VariablePattern orig _ -> orig

instance HasOrigin LabelName where
  originOf x = case x of
    LabelName orig _ -> orig


-- | Display instances for Expr 

instance Display Expr where
  makeDoc x = case x of
   ExprLet _ v e1 e2 -> text "let " <> makeDoc v <> text " = (" <> makeDoc e1 <> text ") in (" <> makeDoc e2 <> text ")"
   ExprScape _ op e -> text "(" <> makeDoc op <> text ") -> (" <> makeDoc e <> text ")"
   ExprBinaryOp _ e1 ao e2 -> text "(" <> makeDoc e1 <> text ") " <> makeDoc ao <> text " (" <> makeDoc e2 <> text ")"
   ExprOnion _ e1 e2 -> text "(" <> makeDoc e1 <> text ") & (" <> makeDoc e2 <> text ")"
   ExprAppl _ e1 e2 -> text "(" <> makeDoc e1 <> text ") apply (" <> makeDoc e2 <> text ")"
   ExprLabelExp _ l e -> text "(" <> makeDoc l <+> makeDoc e <> text ")"
   ExprRef _ e -> text "(" <> text "ref" <+> makeDoc e <> text ")"
   ExprVar _ v -> makeDoc v 
   ExprValInt _ i -> text $ show i
   ExprValChar _ i -> text $ show i
   ExprValEmptyOnion _ -> text "()"

instance Display BinaryOperator where
  makeDoc x = case x of
   OpIntPlus _ -> text "+"
   OpIntMinus _ -> text "-"
   OpIntEq _ -> text "=="
   OpIntGreaterEq _ -> text ">="
   OpIntLessEq _ -> text "<="
   OpSet _ -> text "<-"

instance Display Pattern where
  makeDoc pat = case pat of
   PrimitivePattern _ prim -> makeDoc prim
   LabelPattern _ l p -> text "(" <> makeDoc l <+> makeDoc p <> text ")" 
   RefPattern _ p -> text "ref" <+> makeDoc p
   ConjunctionPattern _ p1 p2 ->  text "(" <> makeDoc p1  <+> text "&pat" <+> makeDoc p2 <> text ")"
   EmptyPattern _ -> text "()"
   VariablePattern _ x -> makeDoc x

instance Display Ident where
  makeDoc x = case x of
    Ident _ i -> text i

instance Display LabelName where
  makeDoc x = case x of
    LabelName _ l -> text $ "`" ++ l

instance Display PrimitiveType where
  makeDoc p = case p of
    PrimInt -> text "int"
    PrimChar -> text "char"
