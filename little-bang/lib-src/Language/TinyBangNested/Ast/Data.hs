module Language.TinyBangNested.Ast.Data
( Expr(..)
, Var (..)
, Label (..)
, OnionOp (..)
, ArithOp(..)
, OuterPattern(..)
, Pattern(..)
, Projector(..)
, Primitive(..)
) where

-- Haskell module generated by the BNF converter

import Language.TinyBang.Display
import Language.TinyBang.Ast.Data (Origin, HasOrigin, originOf)

-- | AST structure for TinyBangNested

data Expr =
   ExprDef Origin Var Expr Expr
 | ExprVarIn Origin Var Expr Expr
 | ExprScape Origin OuterPattern Expr
 | ExprArithOp Origin Expr ArithOp Expr
 | ExprOnionOp Origin Expr OnionOp Projector
 | ExprOnion Origin Expr Expr
 | ExprAppl Origin Expr Expr
 | ExprLabelExp Origin Label Expr
 | ExprVar Origin Var
 | ExprValInt Origin Integer
 | ExprValChar Origin Char
 | ExprValUnit Origin
  deriving (Eq,Ord,Show)

data Var =
   VarDef Origin String
  deriving (Eq,Ord,Show)

data Label =
   LabelDef Origin String
  deriving (Eq,Ord,Show)

data OnionOp =
   OnionSub Origin 
 | OnionDot Origin 
  deriving (Eq,Ord,Show)

data ArithOp =
   Add Origin
 | Sub Origin
 | CompEq Origin 
 | Gt Origin 
 | GTE Origin
 | Lt Origin 
 | LTE Origin
  deriving (Eq,Ord,Show)

data OuterPattern =
   PatLabel Origin Var Pattern
 | OuterPat Origin Pattern
  deriving (Eq,Ord,Show)

data Pattern =
   OnionPat Origin Pattern Pattern
 | LabelPat Origin Label Var Pattern
 | PatProj Origin Primitive
 | PatFun Origin 
 | PatVar Origin Var
  deriving (Eq,Ord,Show)

data Projector =
   PrimProj Origin Primitive
 | LabelProj Origin Label
 | FunProj Origin 
  deriving (Eq,Ord,Show)

data Primitive =
   TInt Origin 
 | TChar Origin 
 | TUnit Origin 
  deriving (Eq,Ord,Show)

-- | HasOrigin instances for Expr 

instance HasOrigin Expr where
  originOf x = case x of
    ExprDef orig _ _ _ -> orig
    ExprVarIn orig _ _ _ -> orig
    ExprScape orig _ _ -> orig
    ExprArithOp orig _ _ _ -> orig
    ExprOnionOp orig _ _ _ -> orig
    ExprOnion orig _ _ -> orig
    ExprAppl orig _ _ -> orig
    ExprLabelExp orig _ _-> orig
    ExprVar orig _ -> orig
    ExprValInt orig _ -> orig
    ExprValChar orig _ -> orig
    ExprValUnit orig -> orig

instance HasOrigin Var where
  originOf x = case x of
    VarDef orig _ -> orig

instance HasOrigin OuterPattern where
  originOf x = case x of
   PatLabel orig _ _ -> orig
   OuterPat orig _ -> orig

instance HasOrigin Pattern where
  originOf x = case x of
   OnionPat orig _ _ -> orig
   LabelPat orig _ _ _ -> orig
   PatProj orig _ -> orig
   PatFun orig -> orig
   PatVar orig _ -> orig

instance HasOrigin Primitive where
  originOf x = case x of
   TInt orig -> orig 
   TChar orig -> orig
   TUnit orig -> orig

instance HasOrigin Projector where
  originOf x = case x of
   PrimProj orig _ -> orig
   LabelProj orig _ -> orig
   FunProj orig -> orig 

instance HasOrigin Label where
  originOf x = case x of
    LabelDef orig _ -> orig


-- | Display instances for Expr 

instance Display Expr where
  makeDoc x = case x of
   ExprDef _ v e1 e2 -> text "def " <> makeDoc v <> text " = (" <> makeDoc e1 <> text ") in (" <> makeDoc e2 <> text ")"
   ExprVarIn _ v e1 e2 -> makeDoc v <> text " = (" <> makeDoc e1 <> text ") in (" <> makeDoc e2 <> text ")"
   ExprScape _ op e -> text "(" <> makeDoc op <> text ") -> (" <> makeDoc e <> text ")"
   ExprArithOp _ e1 ao e2 -> text "(" <> makeDoc e1 <> text ") " <> makeDoc ao <> text " (" <> makeDoc e2 <> text ")" 
   ExprOnionOp _ e oo p -> text "(" <> makeDoc e <+> makeDoc oo <+> makeDoc p <> text ")"
   ExprOnion _ e1 e2 -> text "(" <> makeDoc e1 <> text ") & (" <> makeDoc e2 <> text ")"
   ExprAppl _ e1 e2 -> text "(" <> makeDoc e1 <> text ") apply (" <> makeDoc e2 <> text ")"
   ExprLabelExp _ l e -> text "(" <> makeDoc l <+> makeDoc e <> text ")"
   ExprVar _ v -> makeDoc v 
   ExprValInt _ i -> text $ show i
   ExprValChar _ c -> text $ show c
   ExprValUnit _ -> text "()"

instance Display Var where
  makeDoc x = case x of
    VarDef _ i -> text i

instance Display Label where
  makeDoc x = case x of
    LabelDef _ l -> text $ "`" ++ l

instance Display OnionOp where
 makeDoc x = case x of
   OnionSub _ -> text "&-"
   OnionDot _ -> text "&."

instance Display ArithOp where
  makeDoc x = case x of
   Add _ -> text "+"
   Sub _ -> text "-"
   CompEq _ -> text "=="
   Gt _ -> text ">"
   Lt _ -> text "<"
   GTE _ -> text ">="
   LTE _ -> text "<="

instance Display OuterPattern where
  makeDoc x = case x of
   PatLabel _ var pat -> makeDoc var <> text ":" <> makeDoc pat
   OuterPat _ pat -> makeDoc pat

instance Display Pattern where
  makeDoc x = case x of
   OnionPat _ p1 p2 ->  text "(" <> makeDoc p1  <+> text "&pat" <+> makeDoc p2 <> text ")"
   LabelPat _ l v p -> text "(" <> makeDoc l <+> makeDoc v <> text ":" <> makeDoc p <> text ")" 
   PatProj _ prim -> makeDoc prim
   PatFun _ -> text "fun"
   PatVar _ v -> makeDoc v

instance Display Primitive where
  makeDoc p = case p of
    TInt _ -> text "int"
    TChar _ -> text "char"
    TUnit _ -> text "()"

instance Display Projector where
  makeDoc x = case x of
   PrimProj _ p -> makeDoc p
   LabelProj _ l -> makeDoc l
   FunProj _ -> text "fun" 
