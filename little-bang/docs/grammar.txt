Expr ::= LetExpr
LetExpr ::= let Var = LetExpr in LetExpr
LetExpr ::= FuncExpr
FuncExpr ::= Pattern -> LetExpr
FuncExpr ::= CondExpr
CondExpr ::= if Expr then Expr else Expr
CondExpr ::= BinaryArithExpr
BinaryArithExpr ::= OnionExpr ArithOp BinaryArithExpr
BinaryArithExpr ::= OnionExpr
OnionExpr ::= ApplExpr & OnionExpr
OnionExpr ::= ApplExpr
ApplExpr ::= LabelExpr ApplExpr
ApplExpr ::= LabelExpr
LabelExpr ::= Label LabelExpr
LabelExpr ::= PrimaryExpr
PrimaryExpr ::= Var
PrimaryExpr ::= PrimitiveLiteral
PrimaryExpr ::= ( Expr )
PrimitiveLiteral ::= EmptyOnion
PrimitiveLiteral ::= Integer

Pattern ::= ConjPattern
ConjPattern ::= LabelPattern & ConjPattern
ConjPattern ::= LabelPattern
LabelPattern ::= Label LabelPattern
LabelPattern ::= PrimaryPattern
PrimaryPattern ::= PrimitiveType
PrimaryPattern ::= EmptyOnion
PrimaryPattern ::= Var
PrimaryPattern ::= ( Pattern )

