module Language.PatBang.Syntax.Lexer
( lexPatBang
, Token(..)
, PositionalToken(..)
, SourceLocation(..)
) where

import Control.Applicative((<$>), (<*>), (<*), (*>), pure)
import Text.ParserCombinators.Parsec

import Language.PatBang.Display (Display(..), text, dquotes, (<>))
import Language.PatBang.Syntax.Location
import Text.Parsec.Prim (Parsec)

-- |The raw tokens generated by this lexer.
data Token
  = TokIs -- ^@=@
  | TokPlus -- ^@+@
  | TokMinus -- ^@-@
  | TokLT -- ^@<@
  | TokGT -- ^@>@
  | TokEq -- ^@==@
  | TokEmptyOnion -- ^@()@
  | TokAmp -- ^@&@
  | TokPipe -- ^@|@
  | TokBang -- ^@!@
  | TokArrow -- ^@->@
  | TokBArrow -- ^@<-@
  | TokJoin -- ^@><@
  | TokComma -- ^@,@
  | TokFun -- ^@fun@
  | TokPat -- ^@pat@
  | TokScape -- ^@scape@
  | TokInt -- ^@int@
  | TokRec -- ^@rec@
  | TokColon -- ^@:@
  | TokOpenParen -- ^@(@
  | TokCloseParen -- ^@)@
  | TokSemi -- ^@;@
  | TokOpenBrace -- ^@{@
  | TokCloseBrace -- ^@}@
  | TokIdentifier String
  | TokLitInt Integer
  | TokLabel String -- ^The @String@ is only the name of the label, not the @`@
  deriving (Eq, Ord, Show)

-- |An annotation for tokens which describes their Parsec source position.
data PositionalToken
  = PositionalToken { startPos :: SourcePos
                    , stopPos :: SourcePos
                    , posToken :: Token }
  deriving (Eq, Ord, Show)
  
-- |The Lexer type.
type Lexer a = Parsec String () a

-- | A function to lex a @String@ containing PatBang code.  On error, the
--   result is a left error string; otherwise, it is a right positional token
--   list.
lexPatBang :: String -> String -> Either String [PositionalToken]
lexPatBang resourceName src =
  case parse lexer resourceName src of
    Left x -> Left $ show x
    Right x -> Right x

-- | A lexer which obtains all tokens in a given stream
lexer :: Lexer [PositionalToken]
lexer = nonTokens *> many (posTokenLexer <* nonTokens) <* eof

-- | A lexer which matches non-token content.  This includes whitespace and
--   comments.
nonTokens :: Lexer ()
nonTokens = many (choice [comment, space *> return ()]) *> return ()

-- | A lexer which matches PatBang comments.  Any # character followed by a
--   space or alphanumeric character is a comment until the end of the current
--   line.
comment :: Lexer ()
comment = try $
  char '#' *> choice [space, alphaNum] *> manyTill anyChar newline *> return ()

-- | A lexer which obtains a single positional token from a stream
posTokenLexer :: Lexer PositionalToken
posTokenLexer = do
  (start,tok,stop) <- (,,) <$> getPosition <*> tokenLexer <*> getPosition
  return $ PositionalToken start stop tok
  
-- | A lexer which obtains a single token from a stream
tokenLexer :: Lexer Token
tokenLexer = choice $ map try $
  concat [reservedWords, operators, variableLengthLexers]

-- | A lexer which matches a character which may appear within an identifier.
identChar :: Lexer Char
identChar = alphaNum <|> char '_'

-- | A lexer which matches a character which may start an identifier.
identStartChar :: Lexer Char
identStartChar = letter <|> char '_'

-- | This group of lexers matches all operators and similar symbols.
operators :: [Lexer Token]
operators = map (\(s,t) -> string s *> pure t)
    [ ("->", TokArrow)
    , ("<-", TokBArrow)
    , ("><", TokJoin)
    , ("==", TokEq)
    , ("()", TokEmptyOnion)
    , (",", TokComma)
    , ("+", TokPlus)
    , ("-", TokMinus)
    , ("<", TokLT)
    , (">", TokGT)
    , ("&", TokAmp)
    , ("|", TokPipe)
    , ("!", TokBang)
    , (":", TokColon)
    , ("=", TokIs)
    , ("(", TokOpenParen)
    , (")", TokCloseParen)
    , (";", TokSemi)
    , ("{", TokOpenBrace)
    , ("}", TokCloseBrace)
    ]

-- | This group of lexers matches all reserved words.
reservedWords :: [Parser Token]
reservedWords =
  map (\(s, t) -> string s *> notFollowedBy identChar *> pure t)
    [ ("fun"   , TokFun)
    , ("pat"   , TokPat)
    , ("scape" , TokScape)
    , ("int"   , TokInt)
    , ("rec"   , TokRec)
    ]

-- | This group of lexers matches parametric tokens.
variableLengthLexers :: [Parser Token]
variableLengthLexers =
  [ identifierLexer
  , labelLexer
  , integerLexer
  ]
  where
    identifierLexer = TokIdentifier .: (:) <$> identStartChar <*> many identChar
    labelLexer = TokLabel .: (:) <$>
      (char '`' *> identStartChar) <*> many identChar
    integerLexer = TokLitInt . read .: (:) <$>
      option ' ' (char '-') <*> many1 digit <* notFollowedBy identChar
    -- |A convenient operator for composing a unary operator with a binary one.
    (.:) = (.) . (.)
    infixr 8 .:

instance Display Token where
  makeDoc t = case t of
    TokIs -> dquotes $ text "="
    TokPlus -> dquotes $ text "+"
    TokMinus -> dquotes $ text "-"
    TokLT -> dquotes $ text "<"
    TokGT -> dquotes $ text ">"
    TokEq -> dquotes $ text "=="
    TokEmptyOnion -> dquotes $ text "()"
    TokBang -> dquotes $ text "!"
    TokAmp -> dquotes $ text "&"
    TokPipe -> dquotes $ text "|"
    TokArrow -> dquotes $ text "->"
    TokBArrow -> dquotes $ text "<-"
    TokJoin -> dquotes $ text "><"
    TokComma -> dquotes $ text ","
    TokFun -> dquotes $ text "fun"
    TokPat -> dquotes $ text "pat"
    TokScape -> dquotes $ text "scape"
    TokInt -> dquotes $ text "int"
    TokRec -> dquotes $ text "rec"
    TokColon -> dquotes $ text ":"
    TokOpenParen -> dquotes $ text "("
    TokCloseParen -> dquotes $ text ")"
    TokSemi -> dquotes $ text ";"
    TokOpenBrace -> dquotes $ text "{"
    TokCloseBrace -> dquotes $ text "}"
    TokIdentifier s -> text "id#" <> dquotes (text s)
    TokLitInt n -> text "int#" <> dquotes (text $ show n)
    TokLabel n -> text "label#" <> dquotes (text n)
