package edu.jhu.cs.bigbang.eclipse;

import java.io.File;
import java.net.URL;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

import edu.jhu.cs.bigbang.eclipse.preferences.Preference;
import edu.jhu.cs.bigbang.eclipse.toploop.TopLoopView;

/**
 * The default activator generated by Eclipse.
 * It is instantiated when the platform starts and will be used
 * by the whole plug-in environment.
 * 
 * Right now, since there is only one TopLoop, Activator can be used 
 * to get the toploop object that is already registered. 
 * 
 * @author Keeratipong Ukachoke <kukacho1@jhu.edu>
 *
 */
public class Activator extends AbstractUIPlugin {

	public static final String PLUGIN_ID = "bigbang.activator";

	/** The only instance of this class */
	private static Activator plugin;
	
	/** The location of the plugin */
	private final String pluginDirectory;
	
	/** The toploop view instance */
	private TopLoopView topLoopView;

	/**
	 * The default constructor
	 */
	public Activator() {
		File f = new File("");
		this.pluginDirectory = f.getAbsolutePath();
	}

	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	@Override
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	public static Activator getDefault() {
		return plugin;
	}

	public String getInterpreterPath() {
		return this.getPreferenceStore().getString(Preference.INTERPRETER_PATH);
	}

	public URL getInstalledURL() {
		return getBundle().getEntry("/");
	}

	public TopLoopView getTopLoopView() {
		return topLoopView;
	}

	public void setTopLoopView(TopLoopView topLoopView) {
		this.topLoopView = topLoopView;
	}

	public String getPluginDirectory() {
		return plugin.pluginDirectory;
	}

	public URL getInstallURL() {
		return plugin.getBundle().getEntry("/");
	}

	public static ImageDescriptor getImageDescriptor(String path) {
		return imageDescriptorFromPlugin(PLUGIN_ID, path);
	}
}
