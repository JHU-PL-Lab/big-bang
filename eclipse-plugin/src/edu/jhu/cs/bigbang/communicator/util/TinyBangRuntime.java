package edu.jhu.cs.bigbang.communicator.util;

import java.io.File;
import java.util.List;
import java.util.ArrayList;

import edu.jhu.cs.bigbang.communicator.exception.TinyBangInternalErrorException;
import edu.jhu.cs.bigbang.communicator.exception.TinyBangProtocolException;
import edu.jhu.cs.bigbang.communicator.fromHS.*;
import edu.jhu.cs.bigbang.communicator.toHS.*;

public class TinyBangRuntime {

	private List<String> cmdLst = new ArrayList<String>();
	private ProcessBuilder pb = null;

	public TinyBangRuntime() {
		// Generate process builder
		cmdLst.add("runhaskell");
		cmdLst.add("/home/chao/work/big_bang/sampleCommunicator/v4/mimic_interpreter.hs");
		pb = new ProcessBuilder(cmdLst);
		File f = new File("/home/chao/work/big_bang/sampleCommunicator/v4/");
		pb.directory(f);
	}

	public String runSubProcess() throws TinyBangProtocolException,
			TinyBangInternalErrorException {
		
		TinyBangProcess tbp = new TinyBangProcess(pb);
		// Command cmd = new RunCodeCommand(1, "Success");
		ToHaskellObject tho = new RunCodeCommand(1, 2, 3);
		// print out object for debug
		if (tho instanceof RunCodeCommand) {
			RunCodeCommand rcc = (RunCodeCommand)tho;			
			System.out.println("RunCodeCommand generated by java: " + " tho " + rcc.getTho() + ", r " + rcc.getC() + ", rcr " + rcc.getRcc());
		} else if (tho instanceof ParseCommand) {
			ParseCommand pc = (ParseCommand)tho;			
			System.out.println("ParseCommand generated by java: " + " tho " + pc.getTho() + ", c " +pc.getC() + ", pc " + pc.getPc());
		}
		
		// send java obj to tinybang interpreter
		tbp.sendObj(tho);
		// get response from tinybang interpreter
		FromHaskellObject fho = tbp.readObject(FromHaskellObject.class);
		
		// print out object for debug
		if (fho instanceof RunCodeResponse) {
			RunCodeResponse rcr = (RunCodeResponse)fho;			
			System.out.println("RunCodeResponse generated by java: " + " fho " + rcr.getFho() + ", r " + rcr.getR() + ", rcr " + rcr.getRcr());
		} else if (fho instanceof ParseResponse) {
			ParseResponse pr = (ParseResponse)fho;			
			System.out.println("RunCodeResponse generated by java: " + " fho " + pr.getFho() + ", r " +pr.getR() + ", pr " + pr.getPr());
		}
		
		// destroy the subprocess
		tbp.destroySubProcess();
		return fho.toString();
	}

	public void printf(Object object) {
 		System.out.println(object);
 	}
}
